import React, { useEffect, useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, SafeAreaView, ScrollView, Platform, Alert } from 'react-native';
import { FontAwesomeIcon } from '@fortawesome/react-native-fontawesome';
import { faCrown, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons';
import { Ionicons } from '@expo/vector-icons';
import membershipApi from '../store/api/membershipApi';
import { useSelector } from 'react-redux';
import PaymentWebView from './PaymentWebView';

const VipScreen = ({ navigation }) => {
  const [vip, setVip] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const token = useSelector(state => state.auth.token);
  const accountId = useSelector(state => state.auth.user?.accountId || state.auth.user?.id);
  const [payLoading, setPayLoading] = useState(false);
  const [payError, setPayError] = useState(null);
  const [showWebView, setShowWebView] = useState(false);
  const [paymentUrl, setPaymentUrl] = useState('');

  useEffect(() => {
    const fetchVip = async () => {
      try {
        console.log('üîç [VIP] B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu g√≥i VIP...');
        const data = await membershipApi.getActiveMemberships();
        console.log('‚úÖ [VIP] D·ªØ li·ªáu g√≥i VIP:', JSON.stringify(data, null, 2));
        setVip(data[0]);
      } catch (err) {
        console.error('‚ùå [VIP] L·ªói t·∫£i d·ªØ li·ªáu VIP:', err);
        setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu g√≥i VIP');
      } finally {
        setLoading(false);
      }
    };
    fetchVip();
  }, []);

  const handlePaymentSuccess = async (orderId) => {
    console.log('üéâ [VIP] Thanh to√°n th√†nh c√¥ng, orderId:', orderId);
    
    if (!orderId) {
      console.error('‚ùå [VIP] Kh√¥ng c√≥ orderId t·ª´ thanh to√°n');
      Alert.alert(
        'L·ªói thanh to√°n',
        'Kh√¥ng th·ªÉ x√°c th·ª±c giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i.',
        [{ text: 'OK' }]
      );
      return;
    }

    try {
      console.log('üîç [VIP] Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n cho orderId:', orderId);
      // G·ªçi API ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
      const paymentStatus = await membershipApi.checkPaymentStatus(orderId, token);
      console.log('üìä [VIP] Tr·∫°ng th√°i thanh to√°n:', JSON.stringify(paymentStatus, null, 2));
      
      if (paymentStatus.success && paymentStatus.data.status === 'PAID') {
        console.log('‚úÖ [VIP] X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng');
        Alert.alert(
          'Thanh to√°n th√†nh c√¥ng!',
          `B·∫°n ƒë√£ ƒëƒÉng k√Ω g√≥i VIP th√†nh c√¥ng.\nM√£ ƒë∆°n h√†ng: ${orderId}\nS·ªë ti·ªÅn: ${paymentStatus.data.amount}ƒë\nTh·ªùi gian: ${new Date(paymentStatus.data.paidAt).toLocaleString('vi-VN')}`,
          [
            {
              text: 'OK',
              onPress: () => {
                // Refresh l·∫°i d·ªØ li·ªáu VIP ho·∫∑c navigate v·ªÅ m√†n h√¨nh kh√°c
                navigation.goBack();
              },
            },
          ]
        );
      } else {
        console.warn('‚ö†Ô∏è [VIP] Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá:', paymentStatus);
        Alert.alert(
          'L·ªói thanh to√°n',
          'Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.',
          [{ text: 'OK' }]
        );
      }
    } catch (error) {
      console.error('‚ùå [VIP] L·ªói ki·ªÉm tra tr·∫°ng th√°i thanh to√°n:', error);
      Alert.alert(
        'L·ªói ki·ªÉm tra thanh to√°n',
        'Kh√¥ng th·ªÉ x√°c minh tr·∫°ng th√°i thanh to√°n. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.',
        [{ text: 'OK' }]
      );
    }
  };

  const handlePaymentCancel = () => {
    console.log('‚ùå [VIP] Ng∆∞·ªùi d√πng h·ªßy thanh to√°n');
    Alert.alert(
      'Thanh to√°n ƒë√£ b·ªã h·ªßy',
      'B·∫°n ƒë√£ h·ªßy giao d·ªãch thanh to√°n.',
      [
        {
          text: 'OK',
          style: 'default',
        },
      ]
    );
  };

  const handleRegister = async () => {
    console.log('üöÄ [VIP] B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω VIP...');
    console.log('üì± [VIP] AccountId:', accountId);
    console.log('üéØ [VIP] G√≥i VIP:', JSON.stringify(vip, null, 2));
    console.log('üîë [VIP] Token:', token ? 'C√≥ token' : 'Kh√¥ng c√≥ token');
    
    if (!vip || !accountId) {
      console.error('‚ùå [VIP] Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt:', { vip: !!vip, accountId: !!accountId });
      return;
    }
    
    setPayLoading(true);
    setPayError(null);
    
    try {
      console.log('üí≥ [VIP] T·∫°o thanh to√°n...');
      const res = await membershipApi.createPayment(accountId, vip.membershipId, token);
      console.log('‚úÖ [VIP] T·∫°o thanh to√°n th√†nh c√¥ng:', JSON.stringify(res, null, 2));
      
      // Hi·ªÉn th·ªã th√¥ng b√°o v√† h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën thanh to√°n kh√¥ng
      Alert.alert(
        'Thanh to√°n VIP',
        `B·∫°n c√≥ mu·ªën thanh to√°n g√≥i ${vip.name} v·ªõi gi√° ${vip.price}ƒë?`,
        [
          {
            text: 'H·ªßy',
            style: 'cancel',
            onPress: () => {
              console.log('‚ùå [VIP] Ng∆∞·ªùi d√πng h·ªßy thanh to√°n t·ª´ Alert');
            }
          },
          {
            text: 'Thanh to√°n',
            onPress: () => {
              console.log('üåê [VIP] M·ªü WebView thanh to√°n v·ªõi URL:', res.paymentUrl);
              // M·ªü WebView trong app
              setPaymentUrl(res.paymentUrl);
              setShowWebView(true);
            },
          },
        ]
      );
    } catch (err) {
      console.error('‚ùå [VIP] L·ªói t·∫°o thanh to√°n:', err);
      setPayError('Kh√¥ng th·ªÉ t·∫°o thanh to√°n.');
    } finally {
      setPayLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <View style={styles.container}>
        {/* Header */}
        <View style={{...styles.header}}>
          <TouchableOpacity onPress={() => navigation.goBack()}>
            <Ionicons name="arrow-back" size={28} color="#222" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>N√¢ng c·∫•p VIP</Text>
          <View style={{ width: 28 }} />
        </View>
        <ScrollView contentContainerStyle={styles.scrollContent} showsVerticalScrollIndicator={false}>
          {/* Banner */}
          <View style={styles.banner}>
            <Text style={styles.bannerText}>N√¢ng c·∫•p t√†i kho·∫£n VIP ƒë·ªÉ{"\n"}chƒÉm s√≥c b√© t·ªët h∆°n!</Text>
          </View>
          {/* So s√°nh quy·ªÅn l·ª£i */}
          <View style={styles.compareBox}>
            <Text style={styles.compareTitle}>So s√°nh quy·ªÅn l·ª£i</Text>
            <View style={styles.compareRow}>
              <View style={styles.compareCol}>
                <FontAwesomeIcon icon={faCrown} size={24} color="#aaa" />
                <Text style={styles.freeTitle}>G√≥i Mi·ªÖn Ph√≠</Text>
                <View style={styles.compareItem}><FontAwesomeIcon icon={faCheck} size={16} color="#4caf50" /><Text style={styles.compareText}>  Theo d√µi 1 b√©</Text></View>
                <View style={styles.compareItem}><FontAwesomeIcon icon={faTimes} size={16} color="#f44336" /><Text style={styles.compareText}>  Kh√¥ng c√≥ d·ª± ƒëo√°n s·ª©c kh·ªèe</Text></View>
              </View>
              <View style={styles.compareCol}>
                <FontAwesomeIcon icon={faCrown} size={24} color="#1565C0" />
                <Text style={styles.vipTitle}>{vip ? vip.name : 'G√≥i VIP'}</Text>
                <View style={styles.compareItem}><FontAwesomeIcon icon={faCheck} size={16} color="#4caf50" /><Text style={styles.compareText}>  {vip ? vip.benefits : 'C√≥ d·ª± ƒëo√°n s·ª©c kh·ªèe'}</Text></View>
                <View style={styles.compareItem}><FontAwesomeIcon icon={faCheck} size={16} color="#4caf50" /><Text style={styles.compareText}>  Theo d√µi 5 b√©</Text></View>
              </View>
            </View>
          </View>
          {/* Gi√° v√† th·ªùi h·∫°n */}
          <View style={styles.priceBox}>
            {loading ? (
              <Text>ƒêang t·∫£i...</Text>
            ) : error ? (
              <Text style={{ color: 'red' }}>{error}</Text>
            ) : vip ? (
              <>
                <Text style={styles.price}>{vip.price}<Text style={styles.currency}>ƒë</Text><Text style={styles.perYear}>/{vip.duration} ng√†y</Text></Text>
                <Text style={styles.duration}>{vip.description}</Text>
              </>
            ) : null}
          </View>
        </ScrollView>
        {/* N√∫t ƒëƒÉng k√Ω VIP */}
        <View style={styles.upgradeBtnContainer}>
          <TouchableOpacity
            style={styles.upgradeBtn}
            disabled={payLoading || !vip}
            onPress={handleRegister}
          >
            <Text style={styles.upgradeText}>{payLoading ? 'ƒêang x·ª≠ l√Ω...' : 'ƒêƒÉng k√Ω VIP'}</Text>
          </TouchableOpacity>
          {payError && (
            <Text style={{ color: 'red', marginTop: 8, textAlign: 'center' }}>{payError}</Text>
          )}
        </View>
        
        {/* Payment WebView */}
        <PaymentWebView
          visible={showWebView}
          paymentUrl={paymentUrl}
          onClose={() => setShowWebView(false)}
          onSuccess={handlePaymentSuccess}
          onCancel={handlePaymentCancel}
        />
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: { flex: 1, backgroundColor: '#fff' },
  container: { flex: 1, backgroundColor: '#fff', paddingHorizontal: 20 },
  header: { flexDirection: 'row', alignItems: 'center', justifyContent: 'space-between', paddingTop: 20, paddingBottom: 16 },
  headerTitle: { fontSize: 20, fontWeight: 'bold', color: '#1565C0' },
  banner: { alignItems: 'center', marginBottom: 20 },
  bannerText: { fontSize: 18, fontWeight: 'bold', color: '#1565C0', textAlign: 'center', lineHeight: 28 },
  scrollContent: { paddingBottom: 32 },
  compareBox: { backgroundColor: '#fff', borderRadius: 16, padding: 16, marginBottom: 20 },
  compareTitle: { fontSize: 16, fontWeight: 'bold', marginBottom: 12, color: '#222' },
  compareRow: { flexDirection: 'row', justifyContent: 'space-between' },
  compareCol: { flex: 1, alignItems: 'center' },
  freeTitle: { fontWeight: 'bold', color: '#888', marginVertical: 8 },
  vipTitle: { fontWeight: 'bold', color: '#1565C0', marginVertical: 8 },
  compareItem: { flexDirection: 'row', alignItems: 'center', marginBottom: 6 },
  compareText: { fontSize: 14, color: '#222' },
  priceBox: { alignItems: 'center', marginBottom: 10 },
  price: { fontSize: 32, fontWeight: 'bold', color: '#1565C0' },
  currency: { fontSize: 18, color: '#1565C0' },
  perYear: { fontSize: 16, color: '#888' },
  duration: { fontSize: 14, color: '#888', marginTop: 2 },
  upgradeBtnContainer: {
    paddingBottom: Platform.OS === 'ios' ? 24 : 16,
    paddingTop: 8,
    backgroundColor: '#fff',
  },
  upgradeBtn: {
    backgroundColor: '#1565C0',
    borderRadius: 12,
    paddingVertical: 18,
    alignItems: 'center',
    marginBottom: 0,
    shadowColor: '#1565C0',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.18,
    shadowRadius: 8,
    elevation: 6,
  },
  upgradeText: { color: '#fff', fontSize: 20, fontWeight: 'bold', letterSpacing: 1 },
});

export default VipScreen; 